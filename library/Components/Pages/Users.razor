@page "/users"
@rendermode InteractiveServer
@inject LibraryContext Db
@inject library.Services.DatabaseService DbService
@using library.Components
@using library.Models

@code {
	private string EditUserDataBtnText = "Edytuj";
	private bool notEditable = true;
	private Client? currentClient;
	private string? newName;
	private string? newSurname;
	private string? newPesel;

	private string modalCopyID = "";
	private string clientNameFilter = "";
	private string clientSurnameFilter = "";
	private string clientPeselFilter = "";

	private string rentalErrorMessage = "";
	private string addClientErrorMessage = "";
	private string editClientErrorMessage = "";

	private void onClientNameFilter(ChangeEventArgs e)
	{
		clientNameFilter = (e.Value ?? "").ToString() ?? "";
	}

	private void onClientSurnameFilter(ChangeEventArgs e)
	{
		clientSurnameFilter = (e.Value ?? "").ToString() ?? "";
	}

	private void onClientPeselFilter(ChangeEventArgs e)
	{
		clientPeselFilter = (e.Value ?? "").ToString() ?? "";
	}
	private string? modalClientName;
	private string? modalClientSurname;
	private string? modalClientPesel;

	private void OnEditUserData()
	{
		if (currentClient == null)
		{
			return;
		}
		if (EditUserDataBtnText == "Edytuj")
		{
			EditUserDataBtnText = "Zapisz";
			notEditable = false;
		}
		else if (EditUserDataBtnText == "Zapisz")
		{

			if(newName?.Length > 50)
			{
				editClientErrorMessage = "Imię klienta nie może mieć więcej niż 50 znaków.";
				return;
			}
			else if (string.IsNullOrEmpty(newName))
			{
				editClientErrorMessage = "Imię klienta nie może być puste.";
				return;
			}
			if(newSurname?.Length > 50)
			{
				editClientErrorMessage = "Nazwisko klienta nie może mieć więcej niż 50 znaków.";
				return;
			}
			else if (string.IsNullOrEmpty(newSurname))
			{
				editClientErrorMessage = "Nazwisko klienta nie może być puste.";
				return;
			}
			if(newPesel?.Length > 11)
			{
				editClientErrorMessage = "Pesel klienta nie może mieć więcej niż 11 znaków.";
				return;
			}
			else if (string.IsNullOrEmpty(newPesel))
			{
				editClientErrorMessage = "Pesel klienta nie może być pusty.";
				return;
			}

			currentClient.Name = newName;
			currentClient.Surname = newSurname;
			currentClient.Pesel = newPesel;
			Db.SaveChanges();
			EditUserDataBtnText = "Edytuj";
			notEditable = true;
			editClientErrorMessage = "";
		}
	}
	private void onDeleteUser()
	{
		if (currentClient == null)
		{
			return;
		}
		Db.Rentals.Where(rental => rental.Id_client == currentClient.Id).ToList().ForEach(rental => Db.Rentals.Remove(rental));
		Db.Clients.Remove(currentClient);
		Db.SaveChanges();
		currentClient = null;
		newName = null;
		newSurname = null;
		newPesel = null;
		StateHasChanged();
	}

	private void setClient(Client client)
	{
		currentClient = client;
		newName = client.Name;
		newSurname = client.Surname;
		newPesel = client.Pesel;
	}

	private List<Client> getClients()
	{
		var clients = (from client in Db.Clients
					   where (client.Name ?? "").Contains(clientNameFilter ?? "")
					   && (client.Surname ?? "").Contains(clientSurnameFilter ?? "")
					   && (client.Pesel ?? "").Contains(clientPeselFilter ?? "")
					   select client).ToList();

		return clients;
	}
	async private Task AddClient()
	{
		Client newClient = new();
		if(string.IsNullOrEmpty(modalClientName) || string.IsNullOrEmpty(modalClientSurname) || string.IsNullOrEmpty(modalClientPesel))
		{
			addClientErrorMessage = "Proszę wypełnić wszystkie pola.";
			StateHasChanged();
			return;
		}
		if(modalClientName?.Length > 50)
		{
			addClientErrorMessage = "Imię klienta nie może mieć więcej niż 50 znaków.";
			StateHasChanged();
			return;
		}
		if(modalClientSurname?.Length > 50)
		{
			addClientErrorMessage = "Nazwisko klienta nie może mieć więcej niż 50 znaków.";
			StateHasChanged();
			return;
		}
		if(modalClientPesel?.Length > 11)
		{
			addClientErrorMessage = "Pesel klienta nie może mieć więcej niż 11 znaków.";
			StateHasChanged();
			return;
		}

		newClient.Name = modalClientName;
		newClient.Surname = modalClientSurname;
		newClient.Pesel = modalClientPesel;
		using (var context = new LibraryContext())
		{
			context.Clients.Add(newClient);
			try
			{
				await context.SaveChangesAsync();
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Database error: {ex.GetBaseException}");
				throw new InvalidOperationException("An error occurred while saving data to DB.");
			}
		}
		StateHasChanged();
		addClientErrorMessage = "";
	}

	async private Task AddRental()
	{
		Rental newRental = new();

		//There is no such copy in the DB
		if (Db.Copies.Where(copy => copy.Id_inventory == modalCopyID).Count() == 0)
		{
			rentalErrorMessage = "Egzemplarz o podanym ID inwentarza nie istnieje.";
			StateHasChanged();
			return;
		}
		//There is no client selected
		if (currentClient == null)
		{
			rentalErrorMessage = "Proszę wybrać klienta.";
			StateHasChanged();
			return;
		}
		//The copy is not available
		if (Db.Rentals.Where(rental => rental.Id_copy == Db.Copies.Where(copy => copy.Id_inventory ==
		modalCopyID).First().Id).Count() > 0)
		{
			rentalErrorMessage = "Egzemplarz o podanym ID inwentarza jest niedostępny do wypożyczenia.";
			StateHasChanged();
			return;
		}
		newRental.Date = DateTime.Today;
		newRental.Deadline = DateTime.Today.AddMonths(1);
		newRental.Id_client = currentClient.Id;
		newRental.Id_copy = Db.Copies.Where(copy => copy.Id_inventory == modalCopyID).First().Id;
		using (var context = new LibraryContext())
		{
			context.Rentals.Add(newRental);
			try
			{
				await context.SaveChangesAsync();
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Database error: {ex.GetBaseException}");
				throw new InvalidOperationException("An error occurred while saving data to DB.");
			}
		}
		StateHasChanged();
		rentalErrorMessage = "";
	}
	public void UpdateState()
	{
		StateHasChanged();
	}
}

<PageTitle>Przeszukiwanie użytkowników</PageTitle>

@* MAIN PAGE *@
<div class="container">
	<div class="row">
		<div class="col-md-2">
			Wyszukiwanie
			<input style="margin:10px" @oninput=@onClientNameFilter type="text" class="form-control" id="NameInput"
				placeholder="Imię">
			<input style="margin:10px" @oninput=@onClientSurnameFilter type="text" class="form-control"
				id="SurnameInput" placeholder="Nazwisko">
			<input style="margin:10px" @oninput=@onClientPeselFilter type="text" class="form-control" id="PeselInput"
				placeholder="PESEL">
			Zarządzanie
			<button style="margin:10px" type="button" class="btn btn-primary" data-bs-toggle="modal"
				data-bs-target="#AddUserModal">
				Dodaj użytkownika
			</button>

			@* LIST OF USERS FROM SEARCH *@
			<div style="margin:10px" class="list-group">
				@foreach (var client in getClients())
				{
					<button type="button" class="list-group-item list-group-item-action" @onclick="() => setClient(client)">
						@($"{client.Name} {client.Surname} {client.Pesel}")
					</button>
				}
			</div>
		</div>

		@* CHOSEN USER *@
		<div class="col-md-10">
			Dane
			@if(!string.IsNullOrEmpty(editClientErrorMessage))
				{
					<div class="text-danger" style="margin:10px">@editClientErrorMessage</div>
				}
			<div class="row">
				<div class="d-flex justify-content-between">

					@* PERSONAL DATA *@
					<div class="d-flex">
						<input style="margin:10px" @bind-value=@newName type="text" class="form-control" id="NameData"
							placeholder="Imię" readonly="@notEditable">
						<input style="margin:10px" @bind-value=@newSurname type="text" class="form-control"
							id="SurnameData" placeholder="Nazwisko" readonly="@notEditable">
						<input style="margin:10px" @bind-value=@newPesel type="text" class="form-control" id="PeselData"
							placeholder="Pesel" readonly="@notEditable">
						<button style="margin:10px" type="button" class="btn btn-primary" id="EditUserDataBtn"
							@onclick="OnEditUserData" disabled=@(currentClient == null)>@EditUserDataBtnText</button>
						<button style="margin:10px" type="button" class="btn btn-danger" @onclick="onDeleteUser"
							disabled=@(currentClient == null || Db.Rentals.Where(r => r.Id_client ==
								   currentClient.Id).Count() > 0)>Usuń</button>
					</div>

					@* ADD RENTAL BUTTON *@
					<button style="margin:10px" type="button" class="btn btn-primary" data-bs-toggle="modal"
						data-bs-target="#AddRental" disabled=@(currentClient == null)>
						Dodaj wypożyczenie
					</button>
				</div>
			</div>

			<ul class="list-group overflow-auto shadow" id="BooksList" style="margin:10px; height: 80vh">
				@if (currentClient != null)
				{
					foreach (var rental in Db.Rentals.Where(rent => rent.Id_client == currentClient.Id).ToList())
					{
						<CascadingValue Value="this">
							<RentalComponent Rental=@rental />
						</CascadingValue>
					}
				}
			</ul>
		</div>

	</div>
</div>

@* ADD USER MODAL *@
<div class="modal fade" id="AddUserModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel">Dodaj Użytkownika</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<input style="margin:10px" @bind-value=modalClientName type="text" class="form-control"
					placeholder="Imię">
				<input style="margin:10px" @bind-value=modalClientSurname type="text" class="form-control"
					placeholder="Nazwisko">
				<input style="margin:10px" @bind-value=modalClientPesel type="text" class="form-control"
					placeholder="Pesel">
			</div>
					@if(!string.IsNullOrEmpty(addClientErrorMessage))
					{
					<div class="text-danger" style="margin:10px">@addClientErrorMessage</div>
					}
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
				<button type="button" @onclick=AddClient class="btn btn-primary">Zapisz</button>
			</div>
		</div>
	</div>
</div>

@* ADD RENTAL MODAL *@
<div class="modal fade" id="AddRental" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel">Dodaj wypożyczenie</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<input style="margin:10px" @bind-value=modalCopyID type="text" class="form-control"
					placeholder="ID Inwentarza">
					@if(!string.IsNullOrEmpty(rentalErrorMessage))
					{
						<div class="text-danger" style="margin:10px">@rentalErrorMessage</div>
					}
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
				<button type="button" @onclick=AddRental class="btn btn-primary">Dodaj</button>
			</div>
		</div>
	</div>
</div>
